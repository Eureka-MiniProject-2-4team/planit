<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.eureka.mp2.team4.planit.friend.mapper.FriendMapper">

    <!-- 친구 요청 보내기 -->
    <insert id="insert">
        INSERT INTO friend (id, requester_id, receiver_id, status)
        VALUES (#{id}, #{requesterId}, #{receiverId}, 'PENDING')
    </insert>

    <!-- 내 친구 목록 조회 -->
    <select id="findAllByUserId" resultType="com.eureka.mp2.team4.planit.friend.dto.FriendDto">
        SELECT id, requester_id, receiver_id, status, created_at, accepted_at
        FROM friend
        WHERE (requester_id = #{userId} OR receiver_id = #{userId})
          AND status = 'ACCEPTED'
    </select>

    <!-- 보낸 친구 요청 목록 -->
    <select id="findAskedByRequesterId" resultType="com.eureka.mp2.team4.planit.friend.dto.FriendDto">
        SELECT id, requester_id, receiver_id, status, created_at, accepted_at
        FROM friend
        WHERE requester_id = #{userId}
        AND status =
    </select>

    <!-- 받은 친구 요청 목록 (대기 중) -->
    <select id="findPendingByReceiverId" resultType="com.eureka.mp2.team4.planit.friend.dto.FriendDto">
        SELECT id, requester_id, receiver_id, status, created_at, accepted_at
        FROM friend
        WHERE receiver_id = #{userId}
          AND status = 'PENDING'
    </select>

    <!-- 친구 요청 상태 변경 -->
    <update id="updateStatus">
        UPDATE friend
        SET status = #{status},
            accepted_at = CASE
                              WHEN #{status} = 'ACCEPTED' THEN NOW()
                              ELSE NULL
                END
        WHERE id = #{friendId}
    </update>

    <update id="autoCancelOppositePending">
        UPDATE friend
        SET status = 'AUTO_CANCELLED'
        WHERE requester_id = #{oppositeRequesterId}
          AND receiver_id = #{oppositeReceiverId}
          AND status = 'PENDING'
    </update>


    <!-- ID로 친구 요청 조회 -->
    <select id="findById" resultType="com.eureka.mp2.team4.planit.friend.dto.FriendDto">
        SELECT id, requester_id, receiver_id, status, created_at, accepted_at
        FROM friend
        WHERE id = #{friendId}
    </select>

    <!-- 요청자/수신자의 위치가 바뀌어도 동일한 관계 -->
    <select id="findByBothUserId" resultType="com.eureka.mp2.team4.planit.friend.dto.FriendDto">
        SELECT id, requester_id, receiver_id, status, created_at, accepted_at
        FROM friend
        WHERE (requester_id = #{userId} AND receiver_id = #{targetUserId})
           OR (requester_id = #{targetUserId} AND receiver_id = #{userId})
    </select>

    <!-- 친구 삭제 -->
    <delete id="delete">
        DELETE FROM friend
        WHERE id = #{friendId}
    </delete>

    <!-- 친구찾기 -->
    <select id="searchFriends" resultType="com.eureka.mp2.team4.planit.user.dto.UserSearchDto">
        SELECT u.id, u.nickname, u.email
        FROM users u
                 LEFT JOIN friend f
                           ON (
                               (f.requester_id = #{userId} AND f.receiver_id = u.id)
                                   OR (f.receiver_id = #{userId} AND f.requester_id = u.id)
                               )
        WHERE (u.nickname LIKE CONCAT('%', #{keyword}, '%')
            OR u.email LIKE CONCAT('%', #{keyword}, '%'))
          AND u.id != #{userId}
          AND f.id IS NULL
    </select>

<!--    LIKE 검색: nickname 또는 email에 keyword 포함

    본인 제외: u.id != #{userId}

    이미 친구이거나 요청 중인 사용자 제외:

    friend 테이블에서 userId가 관여한 모든 관계를 대상으로 상대방 ID 추출

    그 결과에 포함되지 않는 유저만 반환-->
</mapper>
