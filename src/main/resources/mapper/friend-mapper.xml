<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.eureka.mp2.team4.planit.friend.mapper.FriendMapper">

    <!-- 친구 요청 보내기 -->
    <insert id="insert">
        INSERT INTO friend (id, requester_id, receiver_id, status)
        VALUES (#{id}, #{requesterId}, #{receiverId}, 'PENDING')
    </insert>

    <!-- 내 친구 목록 조회 -->
    <select id="findAllByUserId" resultType="com.eureka.mp2.team4.planit.friend.dto.FriendDto">
        SELECT f.id,
               f.requester_id,
               u1.nickname AS requesterNickName,
               u1.email AS requesterEmail,
               f.receiver_id,
               u2.nickname AS receiverNickName,
               u2.email AS receiverEmail,
               f.status,
               f.created_at,
               f.accepted_at
        FROM friend f
                 JOIN users u1 ON f.requester_id = u1.id
                 JOIN users u2 ON f.receiver_id = u2.id
        WHERE (f.requester_id = #{userId} OR f.receiver_id = #{userId})
          AND f.status = 'ACCEPTED'
          AND u1.is_active = true AND u2.is_active=true
    </select>

    <!-- 보낸 친구 요청 목록 -->
    <select id="findAskedByRequesterId" resultType="com.eureka.mp2.team4.planit.friend.dto.FriendDto">
        SELECT f.id,
               f.requester_id,
               u1.nickname AS requesterNickName,
               u1.email AS requesterEmail,
               f.receiver_id,
               u2.nickname AS receiverNickName,
               u2.email AS receiverEmail,
               f.status,
               f.created_at,
               f.accepted_at
        FROM friend f
                 JOIN users u1 ON f.requester_id = u1.id
                 JOIN users u2 ON f.receiver_id = u2.id
        WHERE f.requester_id = #{userId}
          AND u1.is_active = true AND u2.is_active=true

    </select>

    <!-- 받은 친구 요청 목록 (대기 중) -->
    <select id="findPendingByReceiverId" resultType="com.eureka.mp2.team4.planit.friend.dto.FriendDto">
        SELECT f.id,
               f.requester_id,
               u1.nickname AS requesterNickName,
               u1.email AS requesterEmail,
               f.receiver_id,
               u2.nickname AS receiverNickName,
               u2.email AS receiverEmail,
               f.status,
               f.created_at,
               f.accepted_at
        FROM friend f
                 JOIN users u1 ON f.requester_id = u1.id
                 JOIN users u2 ON f.receiver_id = u2.id
        WHERE f.receiver_id = #{userId}
          AND f.status = 'PENDING'
          AND u1.is_active = true AND u2.is_active=true

    </select>

    <!-- 친구 요청 상태 변경 -->
    <update id="updateStatus">
        UPDATE friend
        SET status = #{status},
            accepted_at = CASE
                              WHEN #{status} = 'ACCEPTED' THEN NOW()
                              ELSE NULL
                END
        WHERE id = #{friendId}
    </update>


    <!-- ID로 친구 요청 조회 -->
    <select id="findById" resultType="com.eureka.mp2.team4.planit.friend.dto.FriendDto">
        SELECT f.id,
               f.requester_id,
               u1.nickname AS requesterNickName,
               u1.email AS requesterEmail,
               f.receiver_id,
               u2.nickname AS receiverNickName,
               u2.email AS receiverEmail,
               f.status,
               f.created_at,
               f.accepted_at
        FROM friend f
                 JOIN users u1 ON f.requester_id = u1.id
                 JOIN users u2 ON f.receiver_id = u2.id
        WHERE f.id = #{friendId}
          AND u1.is_active = true AND u2.is_active=true

    </select>

    <!-- 요청자/수신자의 위치가 바뀌어도 동일한 관계 -->
    <select id="findByBothUserId" resultType="com.eureka.mp2.team4.planit.friend.dto.FriendDto">
        SELECT f.id,
               f.requester_id,
               u1.nickname AS requesterNickName,
               u1.email AS requesterEmail,
               f.receiver_id,
               u2.nickname AS receiverNickName,
               u2.email AS receiverEmail,
               f.status,
               f.created_at,
               f.accepted_at
        FROM friend f
                 JOIN users u1 ON f.requester_id = u1.id
                 JOIN users u2 ON f.receiver_id = u2.id
        WHERE (f.requester_id = #{userId} AND f.receiver_id = #{targetUserId})
           OR (f.requester_id = #{targetUserId} AND f.receiver_id = #{userId})
            AND u1.is_active = true AND u2.is_active=true

    </select>

    <!-- 친구 삭제 -->
    <delete id="delete">
        DELETE FROM friend
        WHERE id = #{friendId}
    </delete>

</mapper>
